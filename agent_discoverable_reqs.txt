Claude Instructions: Convert Script to Modular Agent

I have a Python script that performs a task (e.g. transcribing, sending reminders, summarizing).
Please refactor it into a reusable agent that can be:
	1.	Automatically discovered and called by an orchestrator
	2.	Run standalone via the command line

Please follow these requirements:


Agent Interface
	1.	In the main scipt implement a describe() function that returns a dictionary with:
	•	name: string — a short agent ID
	•	description: string — what the agent does
	•	capabilities: list of strings — one or more action labels
	•	parameters: a JSON schema for expected input

Example:

def describe():
    return {
        "name": "insert_reminder",
        "description": "Creates a to-do in Apple Reminders",
        "capabilities": ["insert_todo"],
        "parameters": {
            "type": "object",
            "properties": {
                "title": {"type": "string"},
                "due": {"type": "string"}
            },
            "required": ["title"]
        }
    }

	2.	Implement a run(params: dict) -> dict function:
	•	This function receives input parameters (validated by the orchestrator)
	•	It performs the core task
	•	It returns a dictionary result (e.g., {"status": "success"})


Standalone CLI Mode
	3.	Add a __main__ section at the bottom of the file so it can be run directly:
	•	It should accept a JSON string as the first CLI argument
	•	Parse the JSON and pass it to run()
	•	Print the result as JSON

Example:

if __name__ == "__main__":
    import sys, json
    if len(sys.argv) < 2:
        print("Usage: python agent.py '{\"title\": \"Buy milk\"}'")
        sys.exit(1)
    params = json.loads(sys.argv[1])
    result = run(params)
    print(json.dumps(result, indent=2))


⸻

Bonus

If the script has input/output file paths, add examples or default test values to a separate file test.json in the same folder.


This design ensures your agent is:
	•	Easy to register in a tool registry
	•	Callable with structured input/output
	•	Reusable inside larger automation workflows
